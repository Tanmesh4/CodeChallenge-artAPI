{"ast":null,"code":"var _jsxFileName = \"/Users/tanmeshshah/Desktop/try-fulltime-jobs/React-applications/Untitled/CodeChallenge-artAPI/tryArtAPI/tryArtAPI/src/imageConstructor/index.tsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageConstructor = _ref => {\n  _s();\n  let {\n    width,\n    height,\n    id\n  } = _ref;\n  const [tiles, setTiles] = useState([]);\n  const [tileSize, setTileSize] = useState(1);\n  useEffect(() => {\n    const fetchTiles = async () => {\n      try {\n        const response = await axios.get(`https://www.rijksmuseum.nl/api/en/collection/${id}/tiles?&key=2esrTh6M`);\n        const data = response.data;\n        let res = width * height;\n        let closestResolution = 0;\n        for (let i = 0; i < data.levels.length; i++) {\n          const distance = Math.sqrt((data.levels[i].width - width) ** 2 + (data.levels[i].height - height) ** 2);\n          if (distance < res) {\n            closestResolution = i;\n            res = distance;\n          }\n        }\n        console.log(\"data: \", data, data.levels[closestResolution]);\n        setTiles(data.levels[closestResolution].tiles);\n\n        // Calculate tile size dynamically based on the number of tiles and image dimensions\n        const numTilesX = Math.ceil(data.levels[closestResolution].width / tileSize);\n        const numTilesY = Math.ceil(data.levels[closestResolution].height / tileSize);\n        const tileSizeX = Math.ceil(data.levels[closestResolution].width / numTilesX);\n        const tileSizeY = Math.ceil(data.levels[closestResolution].height / numTilesY);\n        console.log(data.levels[closestResolution].width, numTilesX, numTilesY, tileSizeX, tileSizeY);\n        setTileSize(Math.min(tileSizeX, tileSizeY));\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchTiles();\n  }, [width, height, id]);\n  const renderTiles = () => {\n    const tileElements = [];\n    tiles.forEach(tile => {\n      const x = tile.x * tileSize;\n      const y = tile.y * tileSize;\n      const tileElement = /*#__PURE__*/_jsxDEV(\"img\", {\n        src: tile.url,\n        style: {\n          position: \"absolute\",\n          left: `${x}px`,\n          top: `${y}px`,\n          width: `${tileSize}px`,\n          height: `${tileSize}px`\n        }\n      }, `${tile.url}-${x}-${y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this);\n      tileElements.push(tileElement);\n    });\n    return tileElements;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width,\n      height\n    },\n    children: tiles && tiles.length > 0 ? renderTiles() : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageConstructor, \"yM16eQ+vp2fxYyPhflbP/92BGMw=\");\n_c = ImageConstructor;\nexport default ImageConstructor;\nvar _c;\n$RefreshReg$(_c, \"ImageConstructor\");","map":{"version":3,"names":["axios","React","useState","useEffect","jsxDEV","_jsxDEV","ImageConstructor","_ref","_s","width","height","id","tiles","setTiles","tileSize","setTileSize","fetchTiles","response","get","data","res","closestResolution","i","levels","length","distance","Math","sqrt","console","log","numTilesX","ceil","numTilesY","tileSizeX","tileSizeY","min","error","renderTiles","tileElements","forEach","tile","x","y","tileElement","src","url","style","position","left","top","fileName","_jsxFileName","lineNumber","columnNumber","push","children","_c","$RefreshReg$"],"sources":["/Users/tanmeshshah/Desktop/try-fulltime-jobs/React-applications/Untitled/CodeChallenge-artAPI/tryArtAPI/tryArtAPI/src/imageConstructor/index.tsx"],"sourcesContent":["import axios from \"axios\";\nimport { log } from \"console\";\nimport React, { useState, useEffect } from \"react\";\n\ninterface ITile {\n  url: string;\n  x: number;\n  y: number;\n}\n\ninterface IImageConstructorProps {\n  width: number;\n  height: number;\n  id: string;\n}\n\nconst ImageConstructor: React.FC<IImageConstructorProps> = ({\n  width,\n  height,\n  id,\n}) => {\n  const [tiles, setTiles] = useState<ITile[]>([]);\n  const [tileSize, setTileSize] = useState<number>(1);\n\n  useEffect(() => {\n    const fetchTiles = async () => {\n      try {\n        const response = await axios.get(\n          `https://www.rijksmuseum.nl/api/en/collection/${id}/tiles?&key=2esrTh6M`\n        );\n        const data = response.data;\n        let res = width * height;\n        let closestResolution: number = 0;\n        for (let i = 0; i < data.levels.length; i++) {\n          const distance = Math.sqrt(\n            (data.levels[i].width - width) ** 2 +\n              (data.levels[i].height - height) ** 2\n          );\n          if (distance < res) {\n            closestResolution = i;\n            res = distance;\n          }\n        }\n        console.log(\"data: \", data, data.levels[closestResolution]);\n        setTiles(data.levels[closestResolution].tiles);\n\n        // Calculate tile size dynamically based on the number of tiles and image dimensions\n        const numTilesX = Math.ceil(data.levels[closestResolution].width / tileSize);\n        const numTilesY = Math.ceil(data.levels[closestResolution].height / tileSize);\n        const tileSizeX = Math.ceil(data.levels[closestResolution].width / numTilesX);\n        const tileSizeY = Math.ceil(data.levels[closestResolution].height / numTilesY);\n        console.log(data.levels[closestResolution].width,numTilesX,numTilesY,tileSizeX,tileSizeY);\n        setTileSize(Math.min(tileSizeX, tileSizeY));\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchTiles();\n  }, [width, height, id]);\n\n  const renderTiles = () => {\n    const tileElements: JSX.Element[] = [];\n\n    tiles.forEach((tile) => {\n      const x = tile.x * tileSize;\n      const y = tile.y * tileSize;\n\n      const tileElement = (\n        <img\n          key={`${tile.url}-${x}-${y}`}\n          src={tile.url}\n          style={{\n            position: \"absolute\",\n            left: `${x}px`,\n            top: `${y}px`,\n            width: `${tileSize}px`,\n            height: `${tileSize}px`,\n          }}\n        />\n      );\n\n      tileElements.push(tileElement);\n    });\n\n    return tileElements;\n  };\n\n  return (\n    <div style={{ position: \"relative\", width, height }}>\n      {tiles && tiles.length > 0 ? (\n        renderTiles()\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n\nexport default ImageConstructor;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}