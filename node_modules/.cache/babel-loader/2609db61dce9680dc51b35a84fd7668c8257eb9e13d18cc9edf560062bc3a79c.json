{"ast":null,"code":"var _jsxFileName = \"/Users/tanmeshshah/Desktop/try-fulltime-jobs/React-applications/CodeChallenge-artAPI/src/components/atom/imageConstrtuctor/index.tsx\",\n  _s = $RefreshSig$();\nimport { Box } from \"@mui/material\";\nimport axios from \"axios\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Loading from \"../Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ImageConstructor = _ref => {\n  _s();\n  let {\n    width,\n    height,\n    id\n  } = _ref;\n  const [tiles, setTiles] = useState([]);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const fetchTiles = async () => {\n      try {\n        var _data$levels$closestR;\n        const response = await axios.get(`https://www.rijksmuseum.nl/api/en/collection/${id}/tiles?&key=2esrTh6M`);\n        const data = response.data;\n        let res = width * height;\n        let closestResolution = 0;\n        for (let i = 0; i < data.levels.length; i++) {\n          const distance = Math.sqrt((data.levels[i].width - width) ** 2 + (data.levels[i].height - height) ** 2);\n          if (distance < res) {\n            closestResolution = i;\n            res = distance;\n          }\n        }\n        console.log(\"my tiles: \", data.levels[closestResolution]);\n        setTiles(data.levels[closestResolution].tiles);\n        if (!canvasRef.current) return;\n        const canvas = canvasRef.current;\n        const context = canvas.getContext(\"2d\");\n        if (!context) return;\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        const image = new Image();\n        let loadedTiles = 0;\n        const noOfTiles = data.levels[closestResolution].tiles.length;\n        const tilesWidth = Math.round(width / Math.sqrt(noOfTiles));\n        const tileHeight = Math.round(height / Math.sqrt(noOfTiles));\n        console.log(\"tile data is: \", noOfTiles, tilesWidth, tileHeight);\n        image.onload = () => {\n          data.levels[closestResolution].tiles.forEach(tile => {\n            const tileImage = new Image();\n            tileImage.crossOrigin = \"anonymous\";\n            tileImage.onload = () => {\n              context.drawImage(tileImage, tile.x * tilesWidth, tile.y * tileHeight, tilesWidth, tileHeight);\n              loadedTiles++;\n              if (loadedTiles === noOfTiles) {\n                var _canvas$parentNode;\n                const imgData = canvas.toDataURL();\n                const img = new Image();\n                img.src = imgData;\n                img.width = width;\n                img.height = height;\n                (_canvas$parentNode = canvas.parentNode) === null || _canvas$parentNode === void 0 ? void 0 : _canvas$parentNode.replaceChild(img, canvas);\n              }\n            };\n            tileImage.src = tile.url;\n          });\n        };\n        image.src = (_data$levels$closestR = data.levels[closestResolution].tiles[0]) === null || _data$levels$closestR === void 0 ? void 0 : _data$levels$closestR.url;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchTiles();\n  }, [width, height, id]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: \"flex\",\n      maxWidth: \"450px\"\n    },\n    \"data-testid\": \"imageConstructor\",\n    children: tiles && tiles.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: width,\n        height: height,\n        style: {\n          display: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageConstructor, \"6A6dkj7w69pg5q/+df98iWmGi1Y=\");\n_c = ImageConstructor;\nexport default ImageConstructor;\nvar _c;\n$RefreshReg$(_c, \"ImageConstructor\");","map":{"version":3,"names":["Box","axios","React","useState","useEffect","useRef","Loading","jsxDEV","_jsxDEV","Fragment","_Fragment","ImageConstructor","_ref","_s","width","height","id","tiles","setTiles","canvasRef","fetchTiles","_data$levels$closestR","response","get","data","res","closestResolution","i","levels","length","distance","Math","sqrt","console","log","current","canvas","context","getContext","clearRect","image","Image","loadedTiles","noOfTiles","tilesWidth","round","tileHeight","onload","forEach","tile","tileImage","crossOrigin","drawImage","x","y","_canvas$parentNode","imgData","toDataURL","img","src","parentNode","replaceChild","url","error","sx","display","maxWidth","children","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tanmeshshah/Desktop/try-fulltime-jobs/React-applications/CodeChallenge-artAPI/src/components/atom/imageConstrtuctor/index.tsx"],"sourcesContent":["import { Box } from \"@mui/material\";\nimport axios from \"axios\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Loading from \"../Loading\";\n\ninterface ITile {\n  url: string;\n  x: number;\n  y: number;\n}\n\ninterface IImageConstructorProps {\n  width: number;\n  height: number;\n  id: string;\n}\n\nconst ImageConstructor: React.FC<IImageConstructorProps> = ({ width, height, id }) => {\n  const [tiles, setTiles] = useState<ITile[]>([]);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const fetchTiles = async () => {\n      try {\n        const response = await axios.get(\n          `https://www.rijksmuseum.nl/api/en/collection/${id}/tiles?&key=2esrTh6M`\n        );\n        const data = response.data;\n        let res = width * height;\n        let closestResolution: number = 0;\n        for (let i = 0; i < data.levels.length; i++) {\n          const distance = Math.sqrt(\n            (data.levels[i].width - width)**2 + (data.levels[i].height - height)**2\n          );\n          if (distance < res) {\n            closestResolution = i;\n            res = distance;\n          }\n        }\n        console.log(\"my tiles: \", data.levels[closestResolution]);\n        setTiles(data.levels[closestResolution].tiles);\n  \n        if (!canvasRef.current) return;\n        const canvas = canvasRef.current;\n        const context = canvas.getContext(\"2d\");\n        if (!context) return;\n        context.clearRect(0, 0, canvas.width, canvas.height);\n  \n        const image = new Image();\n        let loadedTiles = 0;\n        const noOfTiles = data.levels[closestResolution].tiles.length;\n        const tilesWidth = Math.round(width / Math.sqrt(noOfTiles));\n        const tileHeight = Math.round(height / Math.sqrt(noOfTiles));\n        console.log(\"tile data is: \", noOfTiles, tilesWidth, tileHeight);\n        image.onload = () => {\n          data.levels[closestResolution].tiles.forEach((tile: { x: number; y: number; url: string; }) => {\n            const tileImage = new Image();\n            tileImage.crossOrigin = \"anonymous\";\n            tileImage.onload = () => {\n              context.drawImage(\n                tileImage,\n                tile.x * tilesWidth,\n                tile.y * tileHeight,\n                tilesWidth,\n                tileHeight\n              );\n              loadedTiles++;\n              if (loadedTiles === noOfTiles) {\n                const imgData = canvas.toDataURL();\n                const img = new Image();\n                img.src = imgData;\n                img.width = width;\n                img.height = height;\n                canvas.parentNode?.replaceChild(img, canvas);\n              }\n            };\n            tileImage.src = tile.url;\n          });\n        };\n        image.src = data.levels[closestResolution].tiles[0]?.url;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n  \n    fetchTiles();\n  }, [width, height, id]);\n  \n  return (\n    <Box sx={{ display: \"flex\", maxWidth: \"450px\" }} data-testid=\"imageConstructor\">\n      {tiles && tiles.length > 0 ? (\n        <>\n          <canvas ref={canvasRef} width={width} height={height} style={{ display: \"none\" }} />\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Box>\n  );\n};\n\nexport default ImageConstructor;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}